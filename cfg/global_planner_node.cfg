#!/usr/bin/env python
PACKAGE = "avoidance"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("min_altitude_",    int_t,    0, "Minimum planned altitude", 1,  0, 10)
gen.add("max_altitude_",    int_t,    0, "Maximum planned altitude", 10,  0, 50)
gen.add("max_cell_risk_", double_t, 0, "Maximum risk allowed per cells",    0.2, 0.0,   1.0)
gen.add("smooth_factor_", double_t, 0, "Cost of turning",    10.0, 0.0,   100.0)
gen.add("vert_to_hor_cost_", double_t, 0, "Cost of changing between horizontal and vertical direction",    1.0, 0.0,   10.0)
gen.add("risk_factor_", double_t, 0, "Cost of crashing",    500.0, 0.0,   1000.0)
gen.add("neighbor_risk_flow_", double_t, 0, "The effect of the risk of neighboring cells",    1.0, 0.0,   1.0)
gen.add("expore_penalty_", double_t, 0, "The cost of unexplored space",    0.005, 0.0,   0.01)
gen.add("up_cost_", double_t, 0, "Cost of ascending 1m",    3.0, 0.0,   10.0)
gen.add("down_cost_", double_t, 0, "Cost of descending 1m",    1.0, 0.0,   10.0)
gen.add("search_time_", double_t, 0, "Time it takes to return a new path",    0.5, 0.0,   1.0)
gen.add("max_iterations_", int_t, 0, "Maximum number of iterations",    2000, 0,   10000)
gen.add("goal_must_be_free_",   bool_t,   0, "Don't bother trying to find a path if the exact goal is occupied",  True)
gen.add("use_current_yaw_",   bool_t,   0, "The current yaw affects the pathfinding",  True)
gen.add("use_risk_heuristics_",   bool_t,   0, "Use non underestimating heuristics for risk",  True)
gen.add("use_speedup_heuristics_",   bool_t,   0, "Use non underestimating heuristics for speedup",  True)

exit(gen.generate(PACKAGE, "avoidance", "GlobalPlannerNode"))