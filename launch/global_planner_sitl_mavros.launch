<launch>
    <arg name="headless" default="false"/>
    <arg name="gui" default="true"/>
    <arg name="ns" default="/"/>
    <arg name="model" default="iris"/>
    <arg name="world" default="test_city_2"/>
    <arg name="build" default="posix_sitl_default"/>
    <arg name="fcu_url" default="udp://:14540@localhost:14557"/>
    <arg name="gcs_url" default="" />
    <arg name="tgt_system" default="1" />
    <arg name="tgt_component" default="1" />
    <arg name="mavros_transformation" default="-1.58" />


    <param name="use_sim_time" value="true" />

    <!-- Transformations for the camera and the world -->
    <node pkg="tf" type="static_transform_publisher" name="tf_90_deg" 
          args="0 0 0 $(arg mavros_transformation) 0 0 world local_origin 100"/>
    <node pkg="tf" type="static_transform_publisher" name="tf_depth_camera" 
          args="0 0 0 -1.58 0 -1.58 fcu camera_link 100"/>

    <!-- Launch MAVROS posix SITL environment -->
<!--     <include file="$(find px4)/launch/mavros_posix_sitl.launch">
        <arg name="world" value="$(arg world)"/>
    </include> -->

    <!-- Start SITL -->
    <node pkg="px4" type="sitl_run.sh" name="simulator" 
        args="posix-configs/SITL/init/rcS none gazebo $(arg model) $(find px4)/build_$(arg build)">
        <env name="no_sim" value="1" />
    </node>

    <!-- Launch MavROS -->
    <group ns="$(arg ns)">
        <include file="$(find mavros)/launch/node.launch">
            <arg name="pluginlists_yaml" value="$(find mavros)/launch/px4_pluginlists.yaml" />
            <!-- Need to change the config file to get the tf topic and get local position in terms of local origin -->
            <arg name="config_yaml" value="$(find avoidance)/resource/px4_config.yaml" />
            <arg name="fcu_url" value="$(arg fcu_url)" />
            <arg name="gcs_url" value="$(arg gcs_url)" />
            <arg name="tgt_system" value="$(arg tgt_system)" />
            <arg name="tgt_component" value="$(arg tgt_component)" />
        </include>
    </group>

    <!-- Launch world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="headless" value="$(arg headless)"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="world_name" value="$(find avoidance)/worlds/$(arg world).world" />
    </include>

    <!-- Spawn iris with depth camera -->
    <node name="spawn_model" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-sdf -database iris_depth_camera -model iris_depth_camera">
    </node>

    <!-- Global Planner -->
    <node name="global_planner_node" pkg="avoidance" type="global_planner_node" output="screen" 
          args="$(find avoidance)/resource/random_goals"  />
    <node name="path_handler_node" pkg="avoidance" type="path_handler_node" output="screen" />

   <!-- OctoMap Server -->
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
        <param name="resolution" value="1.0" />
        <!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
        <param name="frame_id" type="string" value="world" />
        <!-- maximum range to integrate (speedup!) -->
        <param name="sensor_model/max_range" value="9.0" />
        <param name="sensor_model/min" value="0.01" />
        <param name="sensor_model/max" value="0.99" />
        <param name="sensor_model/hit" value="0.9" />
        <param name="sensor_model/miss" value="0.45" />
        <param name="color/r" value="0.1" />
        <param name="color/g" value="0.1" />
        <param name="color/b" value="0.1" />
        <param name="color/a" value="1.0" />
        <!-- Filter out obstacles which are lower than 1 meter -->
        <!-- <param name="occupancy_min_z" value="1.0" /> -->
        <param name="height_map" value="false" />
        <param name="publish_free_space" value="false" />
        <!-- data source to integrate (PointCloud2) -->
        <remap from="cloud_in" to="/camera/depth/points" respawn="true" />
        <!-- <remap from="cloud_in" to="/omi_cam/point_cloud" /> -->
    </node>

    <!-- RViz -->
    <node pkg="rviz" type="rviz" output="screen" name="rviz" respawn="true" />
</launch>
