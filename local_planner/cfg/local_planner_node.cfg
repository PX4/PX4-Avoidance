#!/usr/bin/env python
PACKAGE = "avoidance"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# local_planner

gen.add("callback_topic",    str_t,    0, "pointcloud callback topic",  "/camera/depth/points")
                     
gen.add("min_box_x_",    double_t,    0, "Minimum box extension in x direction", 5,  0, 20)
gen.add("max_box_x_",    double_t,    0, "Maximum box extension in x direction", 5,  0, 20)
gen.add("min_box_y_",    double_t,    0, "Minimum box extension in y direction", 5,  0, 20)
gen.add("max_box_y_",    double_t,    0, "Maximum box extension in y direction", 5,  0, 20)
gen.add("min_box_z_",    double_t,    0, "Minimum box extension in z direction", 1,  0, 20)
gen.add("max_box_z_",    double_t,    0, "Maximum box extension in z direction", 1,  0, 20)
gen.add("min_dist_to_ground_",    double_t,    0, "Minimal distance to ground", 2,  0, 20)
gen.add("goal_cost_param_", double_t, 0, "Cost function weight for goal oriented behavior", 2.0, 0.5, 20.0)
gen.add("smooth_cost_param_", double_t, 0, "Cost function wight for path smoothness", 1.5, 0.5, 20.0)
gen.add("min_speed_", double_t, 0, "Minimum speed", 1.0, 0.0, 5.0)
gen.add("max_speed_", double_t, 0, "Maximum speed", 2.0, 0.0, 10.0)
gen.add("max_accel_z_", double_t, 0, "Maximum acceleration in z direction", 1.0, 1.0, 20.0)
gen.add("keep_distance_", double_t, 0, "Distance at which the UAV stops in front of an obstacle", 2.0, 1.0, 8.0)
gen.add("goal_z_param", double_t, 0, "Height of the goal position", 3.5, -20.0, 20.0)
gen.add("ground_inlier_distance_threshold_", double_t, 0, "Inlier distance to plane", 0.1, 0.0, 2.0)
gen.add("ground_inlier_angle_threshold_", double_t, 0, "Angular distance to horizontal", 20, 0.0, 90)
gen.add("no_progress_slope_", double_t, 0, "If progress derivative higher than this value the drone rises", -0.0007, -1.0, 1.0)
gen.add("min_cloud_size_", double_t, 0, "Discard pointclouds smaller than this value", 200, 0, 5000)
gen.add("min_plane_points_", double_t, 0, "Discard planefits with less inliers", 160, 0, 5000)
gen.add("min_plane_percentage_", double_t, 0, "Discard planefits with less inliers", 0.7, 0, 1)
gen.add("avoid_radius_", double_t, 0, "min dist before absolutely avoiding", 2.5, 0, 10)
gen.add("min_dist_backoff_", double_t, 0, "min dist before backing off", 1.5, 0, 10)
gen.add("pointcloud_timeout_hover_", double_t, 0, "after this timeout the controller sends hover commands", 0.25, 0, 10)
gen.add("pointcloud_timeout_land_", double_t, 0, "after this timeout the controller sends hover commands", 15, 0, 1000)
gen.add("reproj_age_", int_t, 0, "maximum age of a reprojected point", 50, 0, 1000)

gen.add("stop_in_front_", bool_t, 0, "Enable stop in front of the obstacle", False)
gen.add("use_ground_detection_", bool_t, 0, "Enable ground detection and height control", False)
gen.add("use_back_off_", bool_t, 0, "Enable functionality to move backwards if an obstacle is too close", True)
gen.add("use_avoid_sphere_", bool_t, 0, "Move in void_radius around close points", True)
gen.add("use_VFH_star_", bool_t, 0, "Build lookahead-tree", True)
gen.add("adapt_cost_params_", bool_t, 0, "If no progress towards goal is made, allow rising", True)
gen.add("send_obstacles_fcu_", bool_t, 0, "Send 2D obstacle representation to the FCU", False)

# star_planner
gen.add("childs_per_node_",    int_t,    0, "Branching factor of the search tree", 10,  0, 100)
gen.add("n_expanded_nodes_",    int_t,    0, "Number of nodes expanded in complete tree", 10,  0, 200)
gen.add("tree_node_distance_",    double_t,    0, "Distance between nodes", 1,  0, 20)
gen.add("tree_discount_factor_",    double_t,    0, "Discount factor in tree cost function", 0.8,  0, 1)

exit(gen.generate(PACKAGE, "avoidance", "LocalPlannerNode"))
