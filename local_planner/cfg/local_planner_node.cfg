#!/usr/bin/env python
PACKAGE = "avoidance"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# local_planner

gen.add("box_radius_",    double_t,    0, "Minimum box extension in x direction", 7,  0, 20)
gen.add("goal_cost_param_", double_t, 0, "Cost function weight for goal oriented behavior", 2.0, 0.5, 20.0)
gen.add("smooth_cost_param_", double_t, 0, "Cost function wight for path smoothness", 1.5, 0.5, 20.0)
gen.add("min_speed_", double_t, 0, "Minimum speed", 2.0, 0.0, 5.0)
gen.add("max_speed_", double_t, 0, "Maximum speed", 3.0, 0.0, 10.0)
gen.add("keep_distance_", double_t, 0, "Distance at which the UAV stops in front of an obstacle", 2.0, 1.0, 8.0)
gen.add("goal_z_param", double_t, 0, "Height of the goal position", 3.5, -20.0, 20.0)
gen.add("no_progress_slope_", double_t, 0, "If progress derivative higher than this value the drone rises", -0.0007, -1.0, 1.0)
gen.add("min_cloud_size_", double_t, 0, "Discard pointclouds smaller than this value", 200, 0, 5000)
gen.add("min_plane_points_", double_t, 0, "Discard planefits with less inliers", 160, 0, 5000)
gen.add("min_realsense_dist_", double_t, 0, "Discard points closer than that", 0.2, 0, 10)
gen.add("min_plane_percentage_", double_t, 0, "Discard planefits with less inliers", 0.7, 0, 1)
gen.add("min_dist_backoff_", double_t, 0, "min dist before backing off", 1.5, 0, 10)
gen.add("pointcloud_timeout_hover_", double_t, 0, "after this timeout the controller sends hover commands", 0.5, 0, 10)
gen.add("pointcloud_timeout_land_", double_t, 0, "after this timeout the controller sends hover commands", 15, 0, 1000)
gen.add("reproj_age_", int_t, 0, "maximum age of a reprojected point", 50, 0, 1000)
gen.add("relevance_margin_e_degree_", double_t, 0, "obstacles at more than this angle from goal direction are ignored", 25, 0, 90)
gen.add("relevance_margin_z_degree_", double_t, 0, "obstacles at more than this angle from goal direction are ignored", 40, 0, 180)
gen.add("velocity_sigmoid_slope_", double_t, 0, "the bigger the bigger the acceleration", 3, 0, 10)
gen.add("smoothing_speed_", double_t, 0, "response speed of the smoothing system (set to 0 to disable)", 10, 0, 30)

gen.add("use_vel_setpoints_", bool_t, 0, "Enable velocity setpoints (if false, position setpoints are used)", False)
gen.add("stop_in_front_", bool_t, 0, "Enable stop in front of the obstacle", False)
gen.add("use_back_off_", bool_t, 0, "Enable functionality to move backwards if an obstacle is too close", False)
gen.add("use_VFH_star_", bool_t, 0, "Build lookahead-tree", True)
gen.add("adapt_cost_params_", bool_t, 0, "If no progress towards goal is made, allow rising", True)
gen.add("send_obstacles_fcu_", bool_t, 0, "Send 2D obstacle representation to the FCU", True)

# star_planner
gen.add("childs_per_node_",    int_t,    0, "Branching factor of the search tree", 50,  0, 100)
gen.add("n_expanded_nodes_",    int_t,    0, "Number of nodes expanded in complete tree", 10,  0, 200)
gen.add("tree_node_distance_",    double_t,    0, "Distance between nodes", 1,  0, 20)
gen.add("tree_discount_factor_",    double_t,    0, "Discount factor in tree cost function", 0.8,  0, 1)

exit(gen.generate(PACKAGE, "avoidance", "LocalPlannerNode"))
